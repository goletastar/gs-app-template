[tox]
envlist = py3{8,9,10,11,12}
skip_missing_interpreters = true
skipsdist = true

[testenv]
envdir = {toxinidir}/.env
skip_install = true
package_env = DUMMY NON-EXISTENT ENV NAME

# set the app name (directory) here and use it for paths
# use bionic for envs without the PPA backports
setenv =
    APP_DIR=app_name
    WITH_RPATH = {env:LOCAL_INSTALL_WITH_RPATH:ON}
    BUILD_TYPE = {env:BUILD_TYPE:RelWithDebInfo}
    PREFIX = {env:PREFIX:{envdir}}
    {tests,clang,ctest,bionic}: ENV_RIPC_RUNTIME_DIR = {env:ENV_RIPC_RUNTIME_DIR:{envtmpdir}}

passenv =
    CC
    CXX
    LD
    AR
    NM
    pythonLocation
    CI
    GITHUB*
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    {tests,clang,ctest,bionic,lint,clean,cover,format}: bash
    coverage: tox

changedir =
    {tests,clang,bionic,populate}: build

deps =
    {tests,clang,ctest,bionic,lint,cover,populate}: pip>=21.1
    {tests,clang,ctest,bionic,populate}: cmake
    {tests,clang,ctest,bionic,populate}: ninja
    {tests,clang,bionic}: gcovr
    format: clang-format
    cover: gcovr
    lint: cpplint
    lint: reuse

commands_pre =
    {tests,clang,bionic,populate}: cmake -E make_directory {toxinidir}/build
#    {tests,clang,ctest,bionic,populate}: bash -c '{toxinidir}/scripts/run_redis.sh start > /dev/null'
#    {tests,clang,ctest,bionic,populate}: bash -c '{toxinidir}/scripts/run_redis.sh status'

commands =
    bionic: bash -c "cmake -DWITH_COVERAGE=1 -DCMAKE_BUILD_TYPE=Debug -DGOOGLETEST_SRC_DIR=/usr/src/googletest .."
    clang: bash -c "cmake -DBUILD_TESTING=OFF -DCMAKE_TOOLCHAIN_FILE=../cmake/clang_toolchain.cmake .."
    tests: bash -c "cmake -DVERSION_FORMAT_DEV=1 -DWITH_COVERAGE=1 -DVENDOR_GTEST={env:VENDOR_GTEST} -DCMAKE_BUILD_TYPE={env:BUILD_TYPE} .."
    populate: cmake -G {posargs:"Unix Makefiles"} -DBUILD_TESTING=OFF -DVERSION_FORMAT_DEV=1 -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX={env:PREFIX} -DCMAKE_BUILD_TYPE={env:BUILD_TYPE} -DLOCAL_INSTALL_WITH_RPATH={env:WITH_RPATH} ..
    populate: bash -c 'cmake --build . -j $(nproc) --target install'
    {tests,clang,bionic}: bash -c "cmake --build . -j $(nproc)"
    {tests,bionic}: bash -c "make cov -j$(nproc)"
    {tests,bionic}: bash -c "gcovr -s -r {toxinidir} -e {toxinidir}/ext -e {toxinidir}/{env:APP_DIR}/test -e {toxinidir}/build/_deps {toxinidir}/build/{env:APP_DIR}/"
    #{tests,bionic}: bash -c "gcovr -r {toxinidir} --html --html-details -o {toxinidir}/coverage/coverage.html -e {toxinidir}/ext -e {toxinidir}/{env:APP_DIR}/test -e {toxinidir}/build/_deps {toxinidir}/build/{env:APP_DIR}/"
    ctest: bash -c 'ctest --build-generator {posargs:"Unix Makefiles"} --build-and-test . build --build-options -DWITH_COVERAGE=OFF -DCMAKE_BUILD_TYPE=RelWithDebInfo --test-command ctest -V --timeout 45 --rerun-failed --output-on-failure'
    lint: bash -c "export FILES=$(find {env:APP_DIR}/src -maxdepth 2 -name \*.h -o -name \*.cpp); cpplint --output=gsed {posargs} $FILES"
    cover: bash -c "gcovr --xml --xml-pretty -o {toxinidir}/coverage.xml -r {toxinidir} -e {toxinidir}/build/_deps -e {toxinidir}ext -e {toxinidir}/build/{env:APP_DIR}/test {toxinidir}/build/{env:APP_DIR}/"
    coverage: tox -e tests,cover
    format: bash -c "export FILES=$(find {env:APP_DIR}/{src,tools} -maxdepth 2 -name \*.h -o -name \*.cpp); clang-format -i {posargs} $FILES"
    clean: bash -c 'rm -rf build/ coverage/ coverage.xml'

#commands_post =
#    {tests,clang,ctest,bionic,populate}: bash -c '{toxinidir}/scripts/run_redis.sh stop'

[testenv:changes]
skip_install = true
always_copy = False

allowlist_externals =
    {[testenv:tests]allowlist_externals}

passenv =
    {[testenv:tests]passenv}

deps =
    pip>=21.1
    gitchangelog @ https://github.com/sarnold/gitchangelog/releases/download/3.2.0/gitchangelog-3.2.0-py3-none-any.whl

commands =
    bash -c 'gitchangelog {posargs} > CHANGELOG.rst'
