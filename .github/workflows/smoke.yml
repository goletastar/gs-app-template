name: Smoke

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
      - develop
    paths-ignore:
      - '**.rst'
      - '**.sh'

jobs:
  build:

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    permissions:
      # required for workflows in private repositories
      actions: read
      contents: read
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]

        name: [
          ubuntu-22.04-gcc-10,
          ubuntu-22.04-gcc-11,
          ubuntu-22.04-clang-14,
        ]

        include:
          - name: ubuntu-22.04-gcc-10
            os: ubuntu-22.04
            compiler: gcc
            version: "10"
            toxcmd: tests

          - name: ubuntu-22.04-gcc-11
            os: ubuntu-22.04
            compiler: gcc
            version: "11"
            toxcmd: tests

          - name: ubuntu-22.04-clang-14
            os: ubuntu-22.04
            compiler: clang
            version: "14"
            toxcmd: ctest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Environment
      run: |
        bash -c set

    # note rcl common also depends on redis-ipc, hiredis, json-c,
    # libtbb, fmt, spdlog, and i2c-tools
    - name: Deps plus PPA/msg bus
      run: |
        sudo apt-get -qq update
        sudo apt-get install -yqq software-properties-common redis-server
        sudo add-apt-repository -y -s ppa:nerdboy/embedded
        sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
        sudo apt-get -qq update
        sudo apt-get install -yqq libredis-ipc-dev libgtest-dev libgmock-dev lcov
        sudo apt-get install -yqq libspdlog-dev libfmt-dev
        sudo systemctl stop redis
        if [ "${{ matrix.compiler }}" = gcc ]; then
          sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
          echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
        else
          sudo apt-get install -y clang-${{ matrix.version }} llvm-${{ matrix.version }} lld-${{ matrix.version }}
          echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
        fi

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Tox
      run: |
        python -m pip install --upgrade pip
        pip install tox

    - name: Run build
      env:
        CC: ${{ env.CC }}
        CXX: ${{ env.CXX }}
      run: |
        tox -e ${{ matrix.toxcmd }}

    - uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.version }}
        path: ./coverage

  check:
    name: Collect metrics
    runs-on: ubuntu-22.04
    permissions:
      # required for workflows in private repositories
      actions: read
      contents: read
    needs: [build]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: sarnold/cccc-action@855d440abe1a4229896f36b4d01d88decae0a1f2  # v1.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        source_dirs: |
          app_name/src

    - uses: actions/upload-artifact@v4
      with:
        name: metrics-${{ matrix.version }}
        path: ./metrics
